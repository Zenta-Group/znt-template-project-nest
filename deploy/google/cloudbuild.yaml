steps:
  - id: 'Unshallow clone'
    name: gcr.io/cloud-builders/git
    args: ['fetch', '--unshallow']

  # 1) Instalar deps con Node 22 (no usar cloud-builders/npm)
  - id: 'Install deps (Node 22)'
    name: 'node:22-bullseye'
    entrypoint: 'bash'
    args:
      - -lc
      - |
        node -v && npm -v
        npm ci

  # 2) Correr tests y generar coverage en /workspace/coverage/lcov.info
  - id: 'Run unit tests (coverage)'
    name: 'node:22-bullseye'
    entrypoint: 'bash'
    env:
      # Más estable en builders con pocos CPUs/memoria
      - 'CI=true'
      - 'NODE_OPTIONS=--max-old-space-size=2048'
    args:
      - -lc
      - |
        node -v && npm -v
        npx jest --coverage --coverageReporters=lcov,text-summary --maxWorkers=50%

  # 3) Sonar (instalar Node 22 en Alpine y pasarlo al analizador)
  - id: 'Sonar'
    name: 'sonarsource/sonar-scanner-cli:5.0'
    entrypoint: 'sh'
    args:
      - -lc
      - |
        # Node LTS para el analizador JS/TS (evita "embedded node" en Alpine)
        apk add --no-cache nodejs-current >/dev/null
        node -v
        sonar-scanner \
          -Dsonar.host.url=${_SONAR_URL} \
          -Dsonar.token=${_SONAR_TOKEN} \
          -Dsonar.projectKey=${_COMPONENT_NAME} \
          -Dproject.settings=sonar.properties \
          -Dsonar.nodejs.executable=$(which node)
        # Si prefieres, puedes forzar aquí la ruta del LCOV:
        # -Dsonar.typescript.lcov.reportPaths=coverage/lcov.info

  - id: 'Build docker image'
    name: 'gcr.io/cloud-builders/docker'
    args:
      [
        'build',
        '-t',
        '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_DOCKER_REPOSITORY}/${_COMPONENT_NAME}:$BUILD_ID',
        '.',
      ]

  - id: 'Push docker image'
    name: 'gcr.io/cloud-builders/docker'
    args:
      [
        'push',
        '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_DOCKER_REPOSITORY}/${_COMPONENT_NAME}:$BUILD_ID',
      ]

  - id: 'Deploy to Cloud Run'
    name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'run'
      - 'deploy'
      - '${_COMPONENT_NAME}-${_ENV}'
      - '--image'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_DOCKER_REPOSITORY}/${_COMPONENT_NAME}:$BUILD_ID'
      - '--region'
      - '${_REGION}'
      - '--service-account'
      - '${_RUN_SERVICE_ACCOUNT_EMAIL}'
      - '--set-env-vars'
      - 'ENV=${_ENV},PROJECT_ID=$PROJECT_ID,LIST_CORS=${_LIST_CORS},TOKEN_EXPIRATION=${_TOKEN_EXPIRATION},SECRETKEY_AUTH=${_SECRETKEY_AUTH},EXTERNAL_API_SECURITY_TYPE=${_EXTERNAL_API_SECURITY_TYPE},EXTERNAL_API_TOKEN=${_EXTERNAL_API_TOKEN},EXTERNAL_API_BASE_URL=${_EXTERNAL_API_BASE_URL},GOOGLE_CLIENT_ID=${_GOOGLE_CLIENT_ID},GCP_FIRESTORE_DATABASE_ID=${_GCP_FIRESTORE_DATABASE_ID},NODE_ENV=${_ENV},LOG_LEVEL=${_LOG_LEVEL},DB_HOST=${_DB_HOST},DB_PORT=${_DB_PORT},DB_USER=${_DB_USER},DB_PASS=${_DB_PASS},DB_DB=${_DB_DB},GCP_PROJECT_ID=$PROJECT_ID,CLOUD_RUN_TARGET_URL=${_CLOUD_RUN_TARGET_URL},CLOUD_RUN_API_BASE_URL=${_CLOUD_RUN_API_BASE_URL}'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--port'
      - '3000'
      - '--timeout'
      - '300'
      - '--cpu'
      - '1'
      - '--memory'
      - '512Mi'

options:
  logging: CLOUD_LOGGING_ONLY
